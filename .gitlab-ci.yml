image:
  name: hashicorp/terraform:light
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

stages:
  - Deploy Glue Jobs
  - Get Token
  - Testing
  - Plan
  - Deploy
  - Terraform Plan
  - eot
  - Terraform Deploy
  - RC
  - Teardown

variables:
  TF_ROOT: ${CI_PROJECT_DIR}
  SRC_DIST: "itda-file-load-glue-jobs"
  PY_SOURCE_DIR: "src/main/glue_job"
  #"VERSION_MAJOR.VERSION_MINOR.VERSION_PATCH"
  RELEASE_VERSION: "1.1.3"
  COMPLIANCE_REPO: 'https://cicd.skyway.porsche.com/MARS/compliancereports/itda-file_load-glue-jobs'

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      variables:
        AWS_PROFILE: development
        GLUE_BUCKET: s3://aws-glue-assets-723187635707-us-east-1/scripts/
        ZIP_BUCKET: s3://aws-glue-assets-723187635707-us-east-1/scripts/
        DOCKER_REGISTRY: 723187635707.dkr.ecr.us-east-1.amazonaws.com
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      variables:
        AWS_PROFILE: qa
        GLUE_BUCKET: s3://aws-glue-assets-851203502931-us-east-1/scripts/
        ZIP_BUCKET: s3://aws-glue-assets-851203502931-us-east-1/scripts/
        DOCKER_REGISTRY: 851203502931.dkr.ecr.us-east-1.amazonaws.com
    - if: $CI_PIPELINE_SOURCE == 'web' && $deploy == 'dev'
      variables:
        AWS_PROFILE: development
        GLUE_BUCKET: s3://aws-glue-assets-723187635707-us-east-1/scripts/
        ZIP_BUCKET: s3://aws-glue-assets-723187635707-us-east-1/scripts/
        DOCKER_REGISTRY: 723187635707.dkr.ecr.us-east-1.amazonaws.com
    - if: $CI_PIPELINE_SOURCE == 'web' && $deploy == 'qa'
      variables:
        AWS_PROFILE: qa
        GLUE_BUCKET: s3://aws-glue-assets-851203502931-us-east-1/scripts/
        ZIP_BUCKET: s3://aws-glue-assets-851203502931-us-east-1/scripts/
        DOCKER_REGISTRY: 851203502931.dkr.ecr.us-east-1.amazonaws.com
    - if: $CI_PIPELINE_SOURCE == 'web' && $deploy == 'prod'
      variables:
        AWS_PROFILE: production
        GLUE_BUCKET: s3://aws-glue-assets-165969252561-us-east-1/scripts/
        ZIP_BUCKET: s3://aws-glue-assets-165969252561-us-east-1/scripts/
        DOCKER_REGISTRY: 165969252561.dkr.ecr.us-east-1.amazonaws.com
    - if: $CI_COMMIT_TAG == $RELEASE_VERSION
      variables:
        AWS_PROFILE: production
        GLUE_BUCKET: s3://aws-glue-assets-165969252561-us-east-1/scripts/
        ZIP_BUCKET: s3://aws-glue-assets-165969252561-us-east-1/scripts/
        DOCKER_REGISTRY: 165969252561.dkr.ecr.us-east-1.amazonaws.com
    - when: always

before_script:
  - apk update
  - apk add "zip" "unzip"
  - apk add --update python3 py3-pip
  - apk add --update openssl && rm -rf /var/cache/apk/*
  - rm -rf .terraform
  - terraform --version
  - pip install awscli
  - pip install --upgrade pip
  - cd terraform/

Deploy Glue Jobs Dev:
  stage: Deploy Glue Jobs
  variables:
    ENVIRONMENT: development
  script:
    - echo $TF_ROOT
    - for script in $TF_ROOT/src/main/glue_job/*.py; do aws s3 cp "$script" $GLUE_BUCKET; done

  rules:
    - if: $deploy == 'dev'
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

Deploy Glue Jobs QA:
  stage: Deploy Glue Jobs
  variables:
    ENVIRONMENT: qa
  script:
    - echo $TF_ROOT
    - for script in $TF_ROOT/src/main/glue_job/*.py; do aws s3 cp "$script" $GLUE_BUCKET; done
  rules:
    - if: $deploy == 'qa'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

Deploy Glue Jobs Prod:
  stage: Deploy Glue Jobs
  variables:
    ENVIRONMENT: production
  script:
    - echo $TF_ROOT
    - for script in $TF_ROOT/src/main/glue_job/*.py; do aws s3 cp "$script" $GLUE_BUCKET; done
  rules:
    - if: $deploy == 'prod'
    - if: $CI_COMMIT_TAG == $RELEASE_VERSION
      when: manual

Get Token:
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == 'web'
    - if: $CI_COMMIT_TAG == $RELEASE_VERSION
  stage: Get Token
  before_script:
    - aws --version
  script:
    - USER=AWS
    - TOKEN=$(aws ecr get-login-password)
    - AUTH=$(echo "$USER:$TOKEN" | base64 | tr -d "\n")
    - |
      curl --request PUT --header "PRIVATE-TOKEN: $PERSONALGITLABTOKEN" \
      "https://cicd.skyway.porsche.com/api/v4/groups/mars/variables/AWS_ECR_AUTH" \
      --form "value=$AUTH" --output token.txt
      
Terrascan:
  image:
    name: $DOCKER_REGISTRY/itda-terrascan:latest
    entrypoint: ["/bin/sh", "-c"]
  stage: Testing
  script:
    - echo "Docker Registry:$DOCKER_REGISTRY"
    - terrascan scan -t aws -v --skip-rules="AC_AWS_0486,AC_AWS_0484,AC_AWS_0483" --non-recursive --iac-type="terraform" .
  rules:
    - if: $CI_COMMIT_TAG == $RELEASE_VERSION
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == 'web'

Unit Testing:
  stage: Testing
  script:
    - pip install -r $TF_ROOT/requirements.txt
    - coverage run -m pytest $TF_ROOT/src/main/
    - coverage report
  rules:
    - if: $CI_COMMIT_TAG == $RELEASE_VERSION
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == 'web'
###############################################################################
.terraform_plan_dev:
  script:
    - terraform init -backend-config development/dev_backend.conf
    - terraform validate
    - terraform plan -var-file=development/development.tfvars -out "planfile"

Terraform Plan Dev:
  stage: Plan
  extends: .terraform_plan_dev
  variables:
    ENVIRONMENT: development
  artifacts:
    paths:
      - $TF_ROOT/terraform/planfile
  rules:
    - if: $deploy == 'dev'
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'


.terraform_deploy_dev:
  script:
    - terraform init -backend-config development/dev_backend.conf
    - terraform -chdir=$TF_ROOT/terraform/ apply -input=false "planfile"

Terraform Deploy Dev:
  stage: Deploy
  extends: .terraform_deploy_dev
  variables:
    ENVIRONMENT: development
  dependencies:
    - Terraform Plan Dev
  rules:
    - if: $deploy == 'dev'
      when: manual
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
##############################################################################################
.terraform_plan_qa:
  script:
    - terraform init -backend-config qa/qa_backend.conf
    - terraform validate
    - terraform plan -var-file=qa/qa.tfvars -out "planfileqa"

Terraform Plan QA:
  stage: Plan
  extends: .terraform_plan_qa
  variables:
    ENVIRONMENT: qa
  artifacts:
    paths:
      - $TF_ROOT/terraform/planfileqa
  rules:
    - if: $deploy == 'qa'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

.terraform_deploy_qa:
  script:
    - terraform init -backend-config qa/qa_backend.conf
    - terraform -chdir=$TF_ROOT/terraform/ apply -input=false "planfileqa"

Terraform Deploy QA:
  stage: Deploy
  extends: .terraform_deploy_qa
  variables:
    ENVIRONMENT: qa
  dependencies:
    - Terraform Plan QA
  rules:
    - if: $deploy == 'qa'
      when: manual
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
##############################################################################################
.terraform_plan_prod:
  script:
    - echo $AWS_PROFILE
    - terraform init -backend-config production/prod_backend.conf
    - terraform validate
    - terraform plan -var-file=production/production.tfvars -out "planfileprod"

Terraform Plan Prod:
  stage: Terraform Plan
  extends: .terraform_plan_prod
  variables:
    ENVIRONMENT: production
  artifacts:
    paths:
      - $TF_ROOT/terraform/planfileprod
  rules:
    - if: $deploy == 'prod'
    - if: $CI_COMMIT_TAG == $RELEASE_VERSION

.terraform_deploy_prod:
  script:
    - terraform init -backend-config production/prod_backend.conf
    - terraform -chdir=$TF_ROOT/terraform/ apply -input=false "planfileprod"

Terraform Deploy Prod:
  stage: Terraform Deploy
  extends: .terraform_deploy_prod
  variables:
    ENVIRONMENT: production
  dependencies:
    - Terraform Plan Prod
  rules:
    - if: $deploy == 'prod'  
    - if: $CI_COMMIT_TAG == $RELEASE_VERSION
      when: manual

####################################################################################################
Create RC:
  stage: RC
  before_script:
    - git config --global user.name "woodkr"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
  script:
    - set -e
    - RC_VERSION=$RELEASE_VERSION
    - git tag -a $RELEASE_VERSION -m "Creating Release Candidate $RELEASE_VERSION"
    - git push https://MyPersonalGitlabToken:$GITLAB_TOKEN_KEY@cicd.skyway.porsche.com/MARS/pcna_itda_snowflake_migration_project/itda_file_load_glue_jobs $RELEASE_VERSION
  rules:
    - if: $CI_COMMIT_TAG =~ /\d+\.\d+\.\d+\d+/
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
    - if: $destroy == 'yes'
      when: never

Teardown:
  stage: Teardown
  script:
    # Pre-step: Remove EventBridge rule targets and rules
    - echo "Removing EventBridge rule targets and deleting rules..."
    - |
      EVENT_BUS_NAME="default"
      RULE_NAMES=$(aws events list-rules --event-bus-name $EVENT_BUS_NAME --query "Rules[].Name" --output text)
      for RULE_NAME in $RULE_NAMES; do
        echo "Processing rule: $RULE_NAME"
        TARGET_IDS=$(aws events list-targets-by-rule --rule $RULE_NAME --event-bus-name $EVENT_BUS_NAME --query "Targets[].Id" --output text)
        if [ -n "$TARGET_IDS" ]; then
          echo "Removing targets for rule $RULE_NAME: $TARGET_IDS"
          aws events remove-targets --rule $RULE_NAME --event-bus-name $EVENT_BUS_NAME --ids $TARGET_IDS
        fi
        echo "Deleting rule: $RULE_NAME"
        aws events delete-rule --name $RULE_NAME --event-bus-name $EVENT_BUS_NAME
      done

    # Terraform teardown
    - echo "Initializing Terraform..."
    - terraform init -backend-config development/dev_backend.conf
    - echo "Planning Terraform destruction..."
    - terraform plan -destroy -var-file=development/development.tfvars -out "planfile"
    - echo "Applying Terraform destruction..."
    - terraform apply -input=false -auto-approve "planfile"
  rules:
    - if: $destroy == 'yes'
      when: manual


